package NHF;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Represents the Snake player in the game.
 */
public class SnakePlayer implements Serializable {

    private char direction;
    private Color headColor;
    private int length = 5;
    private GameBoard board;
    private List<SnakeBodyPart> body;
    private Map<Integer, Character> control;

    /**
     * Constructs a SnakePlayer object.
     *
     * @param board    The GameBoard instance.
     * @param moveUP   Key code for moving up.
     * @param moveDown Key code for moving down.
     * @param moveLeft Key code for moving left.
     * @param moveRight Key code for moving right.
     * @param head     Color of the snake's head.
     * @param body     Initial body parts of the snake.
     */
    public SnakePlayer(GameBoard board, int moveUP, int moveDown, int moveLeft, int moveRight, Color head, List<SnakeBodyPart> body) {
        this.board = board;
        headColor = head;
        this.body = new ArrayList<>();
        this.body.addAll(body);

        control = new HashMap<>();
        control.put(moveUP, 'U');
        control.put(moveDown, 'D');
        control.put(moveLeft, 'L');
        control.put(moveRight, 'R');
    }

    /**
     * Moves the snake in its current direction.
     */
    public void move() {
        // Logic to move the snake
    }

    /**
     * Sets the direction of the snake.
     *
     * @param direction The direction to set ('U', 'D', 'L', or 'R').
     */
    public void setDirection(char direction) {
        this.direction = direction;
    }

    /**
     * Sets the position of the snake's head.
     *
     * @param x The x-coordinate.
     * @param y The y-coordinate.
     */
    public void setHead(int x, int y) {
        // Set the position of the snake's head
    }

    /**
     * Draws the snake on the provided Graphics object.
     *
     * @param graphics The Graphics object to draw on.
     */
    public void draw(Graphics graphics) {
        // Draw the snake on the Graphics object
    }

    /**
     * Gets the control direction associated with the given key.
     *
     * @param key The key code to get the control direction for.
     * @return The control direction ('U', 'D', 'L', or 'R').
     */
    public char getControl(int key) {
        return control.get(key);
    }

    /**
     * Checks if the control map contains the specified key.
     *
     * @param key The key code to check for.
     * @return True if the control map contains the key, otherwise false.
     */
    public Boolean containsKey(int key) {
        return control.containsKey(key);
    }

    /**
     * Increases the length of the snake by adding a new body part.
     */
    public void grow() {
        // Add a new body part to the snake
    }

    /**
     * Gets the current length of the snake.
     *
     * @return The length of the snake.
     */
    public int getLength() {
        length = body.size() - 1;
        return length;
    }

    /**
     * Gets a specific body part of the snake by index.
     *
     * @param i The index of the body part to retrieve.
     * @return The SnakeBodyPart at the specified index.
     */
    public SnakeBodyPart getBodyPart(int i) {
        if (i >= 0 && i <= this.getLength()) {
            return body.get(i);
        }
        return null;
    }
}
